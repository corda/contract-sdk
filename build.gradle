import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import static org.gradle.api.JavaVersion.VERSION_17
import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9

buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        contract_sdk_release_group = constants.getProperty("contractSdkReleaseGroup")
        contract_sdk_release_version = constants.getProperty("contractSdkReleaseVersion")
        corda_gradle_plugins_version = constants.getProperty("cordaGradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        dokka_version = constants.getProperty("dokkaVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        log4j_version = constants.getProperty("log4jVersion")
        jackson_version = constants.getProperty("jacksonVersion")
        aetherVersion = constants.getProperty("aetherVersion")
        mavenVersion = constants.getProperty("mavenVersion")
        maven_resolver_version = constants.getProperty("mavenResolverVersion")
        publicArtifactURL = constants.getProperty('publicArtifactURL')
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        artifactPluginVersion = constants.getProperty("artifactPluginVersion")
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "$publicArtifactURL/corda-releases" }
        maven { url "$publicArtifactURL/corda-dependencies" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id 'maven-publish'
    id "com.jfrog.artifactory" version "$artifactPluginVersion"
}

allprojects {
    version "$contract_sdk_release_version"
    group "$contract_sdk_release_group"
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.corda.plugins.quasar-utils'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
        maven { url "$publicArtifactURL/corda-dependencies" }
        maven { url "$publicArtifactURL/corda-releases" }
        maven { url "$publicArtifactURL/corda-dev" }
        maven { url "$publicArtifactURL/corda-lib" }
        maven { url "$publicArtifactURL/corda-lib-dev" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    }

    tasks.withType(KotlinCompile).configureEach {
        compilerOptions {
            languageVersion = KOTLIN_1_9
            apiVersion = KOTLIN_1_9
            jvmTarget = JVM_17
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs = ['-Xjvm-default=all-compatibility']
        }
    }

    java {
        sourceCompatibility = VERSION_17
        targetCompatibility = VERSION_17
    }

    compileJava {
        options.compilerArgs << '-parameters'
    }

    tasks.withType(Jar) {
        jar {
            exclude "**/log4j2*.xml"
        }
    }

    tasks.withType(Test){
        minHeapSize = "128m"
        maxHeapSize = "4096m"
    }
}

// Don't publish an empty "modules" JAR.
def publishProjects = [project(":contract-sdk")]

configure(publishProjects) { Project subproject ->
    task sourceJar(type: Jar, dependsOn: subproject.classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: subproject.javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task install(dependsOn: 'publishToMavenLocal')

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from components.java

                groupId subproject.group
                artifactId "${subproject.name}"
                artifact tasks.sourceJar
                artifact tasks.javadocJar

                pom {
                    description = subproject.description
                }
            }
        }
    }

    artifactory {
        publish {
            contextUrl = 'https://software.r3.com/artifactory'
            repository {
                repoKey = 'corda-lib-dev'
                username = System.getenv('ARTIFACTORY_USERNAME') ?: System.getProperty('corda.artifactory.username')
                password = System.getenv('ARTIFACTORY_PASSWORD') ?: System.getProperty('corda.artifactory.password')
            }

            defaults {
                if (publishProjects.contains(project)) {
                    publications(project.name)
                }
            }
        }
    }
}